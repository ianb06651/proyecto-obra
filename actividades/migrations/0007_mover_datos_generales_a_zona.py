# Generated by Django 5.2.4 on AQUI_VA_LA_FECHA

from django.db import migrations, models
from django.core.exceptions import ObjectDoesNotExist

# ID de la zona "Predio General" que creaste
ID_ZONA_PREDIO_GENERAL = 6

def transferir_datos_generales(apps, schema_editor):
    """
    Mueve los datos de los campos eliminados meta_general y cantidad_general
    a las tablas MetaPorZona y AvancePorZona, asociándolos a la zona "Predio General".
    """
    Actividad = apps.get_model('actividades', 'Actividad')
    AvanceDiario = apps.get_model('actividades', 'AvanceDiario')
    AreaDeTrabajo = apps.get_model('actividades', 'AreaDeTrabajo')
    MetaPorZona = apps.get_model('actividades', 'MetaPorZona')
    AvancePorZona = apps.get_model('actividades', 'AvancePorZona')
    db_alias = schema_editor.connection.alias

    print("\n   > Iniciando transferencia de datos generales a zona 'Predio General'...")

    try:
        zona_general = AreaDeTrabajo.objects.using(db_alias).get(pk=ID_ZONA_PREDIO_GENERAL)
        print(f"   > Zona 'Predio General' (ID: {ID_ZONA_PREDIO_GENERAL}) encontrada.")
    except ObjectDoesNotExist:
        print(f"\n   !!! ERROR CRÍTICO: No se encontró la AreaDeTrabajo con ID={ID_ZONA_PREDIO_GENERAL}. !!!")
        print("   !!! Asegúrate de que exista antes de ejecutar esta migración. !!!")
        # Detener la migración si la zona no existe para evitar errores
        raise ObjectDoesNotExist(f"AreaDeTrabajo con ID={ID_ZONA_PREDIO_GENERAL} no encontrada.")

    # --- Transferir Metas Generales ---
    actividades_con_meta_general = Actividad.objects.using(db_alias).exclude(
        meta_general__isnull=True
    ).exclude(
        meta_general=0 # Opcional: Excluir si no quieres transferir metas de 0
    )
    metas_transferidas = 0
    for actividad in actividades_con_meta_general:
        # Usamos update_or_create para evitar duplicados si la migración se corre más de una vez
        # o si ya existía una entrada para esa zona (aunque no debería si estamos migrando).
        obj, created = MetaPorZona.objects.using(db_alias).update_or_create(
            actividad=actividad,
            zona=zona_general,
            defaults={'meta': actividad.meta_general}
        )
        if created:
            metas_transferidas += 1
        # Opcional: Podrías añadir lógica para sumar si ya existía una meta para esa zona.
        # else: print(f"    - Meta para Actividad ID {actividad.pk} en Zona General ya existía, valor actualizado.")

    print(f"   > Se transfirieron {metas_transferidas} metas generales a MetaPorZona.")

    # --- Transferir Avances Generales ---
    avances_con_cantidad_general = AvanceDiario.objects.using(db_alias).exclude(
        cantidad_general__isnull=True
    ).exclude(
        cantidad_general=0 # Opcional: Excluir si no quieres transferir avances de 0
    )
    avances_transferidos = 0
    for avance in avances_con_cantidad_general:
        obj, created = AvancePorZona.objects.using(db_alias).update_or_create(
            avance_diario=avance,
            zona=zona_general,
            defaults={'cantidad': avance.cantidad_general}
        )
        if created:
            avances_transferidos += 1
        # Opcional: Lógica similar si ya existía un avance para esa zona en ese día.
        # else: print(f"    - Avance para AvanceDiario ID {avance.pk} en Zona General ya existía, valor actualizado.")

    print(f"   > Se transfirieron {avances_transferidos} avances generales a AvancePorZona.")
    print("   > Transferencia completada.")


class Migration(migrations.Migration):

    dependencies = [
        # Asegúrate que esta sea la migración generada en el paso anterior (la que elimina los campos)
        ('actividades', '0006_remove_actividad_meta_general_and_more'),
    ]

    operations = [
        # Añadir los campos temporalmente ANTES de mover los datos
        # Es necesario porque la migración 0006 los elimina, pero necesitamos acceder a ellos aquí.
         migrations.AddField(
            model_name='actividad',
            name='meta_general',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Campo temporal para migración', max_digits=12, null=True),
        ),
         migrations.AddField(
            model_name='avancediario',
            name='cantidad_general',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Campo temporal para migración'),
        ),
        # Ejecutar la función Python para mover los datos
        migrations.RunPython(transferir_datos_generales, reverse_code=migrations.RunPython.noop),
        # Eliminar los campos temporalmente añadidos DESPUÉS de mover los datos
        # Esto asegura que el estado final del esquema sea el correcto (sin los campos)
         migrations.RemoveField(
            model_name='actividad',
            name='meta_general',
        ),
         migrations.RemoveField(
            model_name='avancediario',
            name='cantidad_general',
        ),
    ]